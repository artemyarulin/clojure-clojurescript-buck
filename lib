# ClojureScript library: All source files from 'src' and output of 'deps' would be copied to the output.
# For each folder in src the content would be copied, without the rool folder, so it makes easier to use
# like cljs_lib('ktoa',src=['src']) with existing libs
def cljs_lib(name,src,ns='',deps=[]):
    genrule(name = name,
            srcs = src,
            bash = 'mkdir -p $OUT/{0} && '.format(ns) +
            'for d in $SRCS; do if [[ -d $d ]]; then rsync -r $d/ $OUT; fi; done && ' +
            'for f in $SRCS; do if [[ -f $f ]]; then rsync -r $f $OUT/{0}; fi; done && '.format(ns) +
            ('&&'.join(map(lambda d: 'rsync -r $(location ' + d + ')/ $OUT',deps)) if len(deps) else 'true'),
            out = 'cljs',
            visibility = ['PUBLIC'])

# Wrapper around cljs_lib for easier om component creation. Allows you to build components with
# just cljs_om_component('page-header') assuming that you have page-header.cljs file in the same folder
def cljs_om_component(name,deps=['//ktoa:ktoa']):
    cljs_lib(name,
             ns = 'component',
             src = [name + '.cljs'],
             deps = deps)

# Creates rule :gen-project which would generate lein project for the
# cljs_lib_name library you passed. Optionaly you can pass a dependencies which woule
# be included in the lein file
def cljs_project(cljs_lib_name,project_deps=[]):
    deps = project_deps + ['[org.clojure/clojure "1.7.0"]',
                           '[org.clojure/clojurescript "1.7.228"]',
                           '[figwheel-sidecar "0.5.0-SNAPSHOT"]',
                           '[com.cemerick/piggieback "0.2.1"]']
    sh_binary('cljs-gen-project','//clojurescript-buck:cljs-gen-project.sh')
    genrule(name = 'gen-project',
            srcs = ['.'],
            bash = '$(exe :cljs-gen-project) $OUT $(location :' + cljs_lib_name + ') ' + ' '.join(map(lambda d: d.replace('"','\\"'),deps)),
            out = 'project.' + cljs_lib_name)

# Wrapper around cljs_project which would include om dependency by default
def cljs_om_project(cljs_lib_name):
    cljs_project(cljs_lib_name,['[org.omcljs/om "1.0.0-alpha28"]'])
