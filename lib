# Generates source module. Will put together current module source and dependend modules sources into src/ folder together
# Will create deps file which would contain current and dependend module dependencies
def module(name,ext,src,ns,modules,deps,tests,test_modules,include_modules_test=False):
    if (not src):
        src = [name + ext]
    if (not ns):
        ns = name

    ns = ns.replace('.','//').replace('-','_')

    genrule(name = 'tests',
            srcs = tests,
            bash = 'mkdir -p $OUT/{0} && '.format(ns) +
            'for d in $SRCS; do if [[ -d $d ]]; then rsync -r $d/ $OUT; fi; done &&' +
            'for f in $SRCS; do if [[ -f $f ]]; then rsync -r $f $OUT/{0}; fi; done &&'.format(ns) +
            ('&&'.join(map(lambda d: 'rsync -r $(location ' + d + ')/src/ $OUT',test_modules)) if len(test_modules) else 'true'),
            out='test')

    genrule(name = name,
            srcs = src,
            bash = 'mkdir -p $OUT/src/{0} && mkdir -p $OUT/modules_test && touch $OUT/deps &&'.format(ns) +
            'for d in $SRCS; do if [[ -d $d ]]; then rsync -r $d/ $OUT/src; fi; done && ' +
            'for f in $SRCS; do if [[ -f $f ]]; then rsync -r $f $OUT/src/{0}; fi; done &&'.format(ns) +
            'rsync -r $(location :tests)/ $OUT/test &&' +
            ('&&'.join(map(lambda d: 'rsync -r $(location ' + d + ')/src/ $OUT/src',modules)) if len(modules) else 'true') + '&&' +
            ('&&'.join(map(lambda d: 'cat $(location ' + d + ')/deps >> $OUT/deps',modules)) if len(modules) else 'true') + '&&' +
            ('&&'.join(map(lambda d: 'rsync -r $(location ' + d + ')/test/ $OUT/modules_test',modules)) if len(modules) else 'true') + '&&' +
            ('rsync -r $OUT/modules_test/ $OUT/test' if include_modules_test else 'true') + '&&' +
            ('&&'.join(map(lambda d: 'echo ' + d.replace('"','\\"') + ' >> $OUT/deps',deps)) if len(deps) else 'true'),
            out = 'build',
            visibility = ['PUBLIC'])

def clj_module(name,src=None,ns='',modules=[],deps=[],tests=[],test_modules=[],include_modules_test=False):
    module(name,'.clj',src,ns,modules,['[org.clojure/clojure "1.8.0"]'] + deps,tests,test_modules,include_modules_test)

def cljs_module(name,src=None,ns='',modules=[],deps=[],tests=[],test_modules=[],include_modules_test=False):
    def_modules = ['[org.clojure/clojure "1.8.0"]',
                   '[org.clojure/clojurescript "1.7.228"]',
                   '[figwheel-sidecar "0.5.0-SNAPSHOT"]',
                   '[com.cemerick/piggieback "0.2.1"]']
    module(name,'.cljs',src,ns,modules,def_modules + deps,tests,test_modules,include_modules_test)


# Generated project.clj file and creates lein compatable project for the source module
def project(module_name,template):
    genrule(name = 'project',
            srcs = glob(['**/*.*'], excludes = ['BUCK']),
            bash = 'name=' + module_name + '&&' +
                   'source=$(location :' + module_name + ') &&' +
                   'deps=`cat $source/deps | sort --unique` &&' +
                   'mkdir -p $OUT/src &&' +
                   'rsync --exclude "deps" -r $source/ $OUT &&' +
                   'cat > $OUT/project.clj <<EOL\n' + template + '\nEOL\n',
            out = 'project.' + module_name)

def clj_project(module_name,main=None):
    main_template = """
    :main {0}
    :aot [{0}]""".format(main) if main else ""

    template = """(defproject $name "0.0.1"
  :dependencies [
$deps]
  {0}
  :source-paths ["src"])""".format(main_template)
    project(module_name,template,)

def cljs_project(module_name):
    template = """(defproject $name "0.0.1"
:dependencies [
$deps]
:plugins [[lein-cljsbuild "1.1.2"]
          [lein-doo "0.1.6-SNAPSHOT"]]
:source-paths ["src" "test"]
:cljsbuild {:builds {:debug {:source-paths ["src" "test"]
                             :compiler {:output-dir "debug"}}
                     :release {:source-paths ["src"]
                               :compiler {:optimizations :advanced}}}})"""
    project(module_name,template)


# Genereates release output for the source module
def clj_release(module_name):
    genrule(name='release',
            srcs = glob(['**/*.*'], excludes = ['BUCK']),
            bash = 'cd $(location :project) && LEIN_ROOT=1 lein uberjar && cp target/*-standalone.jar $OUT',
            out = module_name + '.jar')

def cljs_release(name):
    genrule(name='release',
            srcs = glob(['**/*.*'], excludes = ['BUCK']),
            bash = 'cd $(location :project) && lein cljsbuild once release && cp target/cljsbuild-main.js $OUT',
            out = name + '.js')

def om_component(name,src=None,ns='component',modules=['//ktoa:ktoa'],deps=['[org.omcljs/om "1.0.0-alpha28"]'],tests=None,test_modules=[],include_modules_test=False):
    cljs_module(name,
                src = src or [name+'.cljs'],
                ns = ns,
                modules = modules,
                deps = deps,
                tests = tests or [name + '-test.cljs'],
                test_modules = test_modules,
                include_modules_test = include_modules_test)
